import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';

import { BasicErrorControllerService } from './basic-error-controller.service';
import { Configuration } from './configuration';

describe('BasicErrorControllerService', () => {
  let service: BasicErrorControllerService;
  let httpTestingController: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [
        BasicErrorControllerService,
        {
          provide: Configuration,
          useValue: {
            withCredentials: false, // Set this based on your configuration needs
          },
        },
      ],
    });
    service = TestBed.inject(BasicErrorControllerService);
    httpTestingController = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpTestingController.verify();
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should send a DELETE request to errorHtml endpoint', () => {
    const observe = 'body';
    service.errorHtmlUsingDELETE(observe).subscribe();

    const req = httpTestingController.expectOne(`${service['basePath']}/error`);
    expect(req.request.method).toBe('DELETE');
    expect(req.request.params.get('observe')).toBe(observe);
    req.flush({}); // You can provide a response here
  });

  it('should send a GET request to errorHtml endpoint', () => {
    const observe = 'body';
    service.errorHtmlUsingGET(observe).subscribe();

    const req = httpTestingController.expectOne(`${service['basePath']}/error`);
    expect(req.request.method).toBe('GET');
    expect(req.request.params.get('observe')).toBe(observe);
    req.flush({}); // You can provide a response here
  });

  // Similar test cases can be written for other HTTP methods like HEAD, OPTIONS, PATCH, POST, PUT.
});
