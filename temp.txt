import { TestBed, inject } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { ClaimsInquiryControllerService } from './claims-inquiry-controller.service';
import { ClaimsRequest } from '../models/claimsRequest';
import { CodeReferenceRequest } from '../models/codeReferenceRequest';
import { ReferenceDataRequest } from '../models/referenceDataRequest';
import { Configuration } from './configuration';

describe('ClaimsInquiryControllerService', () => {
  let service: ClaimsInquiryControllerService;
  let httpMock: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [
        ClaimsInquiryControllerService,
        { provide: Configuration, useValue: { basePath: 'https://example.com' } }
      ],
    });
    service = TestBed.inject(ClaimsInquiryControllerService);
    httpMock = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should getClaimSummaryUsingPOST', () => {
    const claimsRequest: ClaimsRequest = { /* fill with test data */ };
    const expectedResponse = { /* fill with expected response data */ };

    service.getClaimSummaryUsingPOST(claimsRequest).subscribe((response) => {
      expect(response).toEqual(expectedResponse);
    });

    const request = httpMock.expectOne('https://example.com/claims/v1/claim-summary');
    expect(request.request.method).toBe('POST');
    request.flush(expectedResponse);
  });

  it('should getCodeReferenceUsingPOST', () => {
    const codeReferenceRequest: CodeReferenceRequest = { /* fill with test data */ };
    const expectedResponse = { /* fill with expected response data */ };

    service.getCodeReferenceUsingPOST(codeReferenceRequest).subscribe((response) => {
      expect(response).toEqual(expectedResponse);
    });

    const request = httpMock.expectOne('https://example.com/claims/v1/code-reference');
    expect(request.request.method).toBe('POST');
    request.flush(expectedResponse);
  });

  it('should getPatientDetailsUsingPOST', () => {
    const claimsRequest: ClaimsRequest = { /* fill with test data */ };
    const expectedResponse = { /* fill with expected response data */ };

    service.getPatientDetailsUsingPOST(claimsRequest).subscribe((response) => {
      expect(response).toEqual(expectedResponse);
    });

    const request = httpMock.expectOne('https://example.com/claims/v1/patient-details');
    expect(request.request.method).toBe('POST');
    request.flush(expectedResponse);
  });

  it('should getProviderDetailsUsingPOST', () => {
    const claimsRequest: ClaimsRequest = { /* fill with test data */ };
    const expectedResponse = { /* fill with expected response data */ };

    service.getProviderDetailsUsingPOST(claimsRequest).subscribe((response) => {
      expect(response).toEqual(expectedResponse);
    });

    const request = httpMock.expectOne('https://example.com/claims/v1/provider-details');
    expect(request.request.method).toBe('POST');
    request.flush(expectedResponse);
  });

  it('should getClaimDetailsUsingPOST', () => {
    const claimsRequest: ClaimsRequest = { /* fill with test data */ };
    const expectedResponse = { /* fill with expected response data */ };

    service.getClaimDetailsUsingPOST(claimsRequest).subscribe((response) => {
      expect(response).toEqual(expectedResponse);
    });

    const request = httpMock.expectOne('https://example.com/claims/v1/claim-details');
    expect(request.request.method).toBe('POST');
    request.flush(expectedResponse);
  });

  it('should getReferenceDataUsingPOST', () => {
    const referenceDataRequest: ReferenceDataRequest = { /* fill with test data */ };
    const expectedResponse = { /* fill with expected response data */ };

    service.getReferenceDataUsingPOST(referenceDataRequest).subscribe((response) => {
      expect(response).toEqual(expectedResponse);
    });

    const request = httpMock.expectOne('https://example.com/claims/v1/reference-data');
    expect(request.request.method).toBe('POST');
    request.flush(expectedResponse);
  });
});
