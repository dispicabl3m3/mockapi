import { ComponentFixture, TestBed } from '@angular/core/testing';
import { TabSectionHeaderComponent } from './tab-section-header.component';
import { Angulartics2LaunchByAdobe } from 'ui-commons'; // Import your dependencies here

describe('TabSectionHeaderComponent', () => {
  let component: TabSectionHeaderComponent;
  let fixture: ComponentFixture<TabSectionHeaderComponent>;
  let adobeAnalyticsMock: Partial<Angulartics2LaunchByAdobe>;
  let windowSpy: jasmine.SpyObj<Window>;

  beforeEach(async () => {
    // Mock dependencies
    adobeAnalyticsMock = {
      eventTrack: jasmine.createSpy('eventTrack')
    };

    windowSpy = jasmine.createSpyObj<Window>('window', ['open']);

    await TestBed.configureTestingModule({
      declarations: [TabSectionHeaderComponent],
      providers: [
        { provide: Angulartics2LaunchByAdobe, useValue: adobeAnalyticsMock },
        { provide: Window, useValue: windowSpy }
      ]
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TabSectionHeaderComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should open a new tab with the current window location', () => {
    component.openInNewTab();

    // Expect that the window.open method was called with the current window location
    expect(windowSpy.open).toHaveBeenCalledWith(window.location.href, '_blank');
  });

  it('should open a new tab with the provided URL', () => {
    const url = 'https://example.com';
    component.openNewTab(url);

    // Expect that the window.open method was called with the provided URL
    expect(windowSpy.open).toHaveBeenCalledWith(url, '_blank');
  });

  it('should track analytics event and open a new tab when externalBadgeLinkClicked is called', () => {
    const badge = { analyticsEvent: 'badgeClicked', url: 'https://example.com' };
    component.externalBadgeLinkClicked(badge);

    // Expect that the analytics event was tracked
    expect(adobeAnalyticsMock.eventTrack).toHaveBeenCalledWith('badgeClicked');
    // Expect that the window.open method was called with the badge's URL
    expect(windowSpy.open).toHaveBeenCalledWith(badge.url, '_blank');
  });
});
