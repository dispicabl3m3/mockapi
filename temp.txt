import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ActivatedRoute, Router } from '@angular/router';
import { Angulartics2LaunchByAdobe, RequestBuilder } from 'ui-commons';
import { of } from 'rxjs';

import { TabSectionHeaderComponent } from './tab-section-header.component';
import { ClaimSummaryService } from '../shared/services/claim-summary.service';

describe('TabSectionHeaderComponent', () => {
  let component: TabSectionHeaderComponent;
  let fixture: ComponentFixture<TabSectionHeaderComponent>;

  // Mocks
  const activatedRouteMock = {
    snapshot: {
      routeConfig: {
        path: 'testPath',
      },
    },
    parent: null, // You can provide more details if needed
  };

  const routerMock = {
    serializeUrl: jasmine.createSpy('serializeUrl').and.returnValue('testUrl'),
    createUrlTree: jasmine.createSpy('createUrlTree'),
  };

  const claimSummaryServiceMock = {
    getServiceFromMinusYearDate: () => 'testServiceFromMinusYearDate',
    getTodaysServiceFromDate: () => 'testTodaysServiceFromDate',
    getEpochFromDate: () => 'testEpochFromDate',
  };

  const adobeAnalyticsMock = {
    eventTrack: jasmine.createSpy('eventTrack'),
  };

  const requestBuilderMock = {
    mapRequest: () => {},
    store: () => {},
  };

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [TabSectionHeaderComponent],
      providers: [
        { provide: ActivatedRoute, useValue: activatedRouteMock },
        { provide: Router, useValue: routerMock },
        { provide: ClaimSummaryService, useValue: claimSummaryServiceMock },
        { provide: Angulartics2LaunchByAdobe, useValue: adobeAnalyticsMock },
        { provide: RequestBuilder, useValue: requestBuilderMock },
      ],
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(TabSectionHeaderComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should call adobeAnalytics.eventTrack when onDropDownSubmit is called', () => {
    spyOn(component, 'onSelectOfDropdownOpenInNewTab');
    const event = { currentValue: 'testValue' };
    component.onDropDownSubmit(event);
    expect(adobeAnalyticsMock.eventTrack).toHaveBeenCalledWith('cl_select_view_additional_claims');
  });

  it('should call onSelectOfDropdownOpenInNewTab with "claimsclientmemberid" when onDropDownSubmit is called with the first option', () => {
    const event = { currentValue: 'Find Patient Claims (via Member ID)' };
    component.onDropDownSubmit(event);
    expect(component.onSelectOfDropdownOpenInNewTab).toHaveBeenCalledWith('claimsclientmemberid');
  });

  it('should call onSelectOfDropdownOpenInNewTab with "claimsgroup" when onDropDownSubmit is called with the third option', () => {
    const event = { currentValue: 'Find Additional Claims (via ID/Group ID)' };
    component.onDropDownSubmit(event);
    expect(component.onSelectOfDropdownOpenInNewTab).toHaveBeenCalledWith('claimsgroup');
  });

  // Add more test cases as needed
});
